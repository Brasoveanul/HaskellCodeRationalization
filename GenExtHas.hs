{-# LANGUAGE TypeSynonymInstances #-} 
{-# LANGUAGE FlexibleInstances #-} 
import System.Random
import Data.List
import Data.Time
import Control.Exception


-- The class of types that models the generation of the frequency with which 
-- the objects appear in a specified list
-- Abstraction and genericity

class GSTAT a where
  -- Generating the object frequency in a specified list
  -- Pure functional solution  
  genFOB::[a]->[(a,Int)]
  
  -- Generating the object frequency in a specified list
  -- Monadic solution
  genFIO::[a]->IO [(a,Int)]

  -- Generation of data test
  genDTOB::Int->StdGen->Int->[a]->IO [a]

  -- Counting object occurrences in a specified / sorted list
  contap::a->[a]->(Int,[a])
  
-- Instance of GSTAT / a=>Int
instance GSTAT Int where
  -- **********
  genFOB []=[]
  genFOB lint=((head lint),fob):(genFOB rl)
            where (fob,rl)=contap (head lint) lint

  -- **********
  genFIO lnr=do
  {
    if (lnr==[]) then return []
                 else do
                 { 
                  (nrap,rl)<-return (contap (head lnr) lnr);
                  lsi<-genFIO rl;
                  return (((head lnr),nrap):lsi)
                 }
  }

  -- **********
  -- Input 4 - redundant
  genDTOB size seed lc _=return (randomList size (lc-1) seed)

  -- **********
  contap _ []=(0,[])
  contap cuv (cc:rl)=if (cuv==cc) then ((1+fi),rli)
                                  else (0,(cc:rl))
                                    where (fi,rli)=contap cuv rl
-- **************************************                   

-- Instance of GSTAT / a=>String
instance GSTAT String where
  -- **********
  genFOB []=[]
  genFOB lint=((head lint),fob):(genFOB rl)
            where (fob,rl)=contap (head lint) lint

  -- **********
  genFIO lnr=do
  {
    if (lnr==[]) then return []
                 else do
                 { 
                  (nrap,rl)<-return (contap (head lnr) lnr);
                  lsi<-genFIO rl;
                  return (((head lnr),nrap):lsi)
                 }
  }
  
  -- **********
  -- Input 3 - redundant
  genDTOB size seed _ cGen=do
                           lIGen<-return (randomList size (length cGen) seed)
                           return (gmap lIGen cGen)

  -- **********
  contap _ []=(0,[])
  contap cuv (cc:rl)=if (cuv==cc) then ((1+fi),rli)
                                  else (0,(cc:rl))
                                    where (fi,rli)=contap cuv rl

-- **************************************                   
-- Mapping the list of random integers to a list of objects
-- Objects are selected randomly indexed from a specified object container
-- First input => List of random numbers in a specified range (0,1, ..., N)
-- Second input => List from which 0-indexed objects are transferred to output
-- Output => List generated by random retrieval from input 2 based on numbers from input 1
-- which works as an indexer
gmap::[Int]->[a]->[a]
gmap [] _=[]
gmap (c:rl) cg=(cg!!c):(gmap rl cg)

-- Generate the list of random integers for testing
-- Example of ultra-compact Haskell code due to the combination of functions
-- high order and the composition operator
randomList :: Int ->Int-> StdGen -> [Int]
randomList n lc= take n.unfoldr (Just . randomR(0,lc-1))

-- Testing function <genFOB>
-- a=>Int 
testFOB::IO()
testFOB=do
          seed<-newStdGen
          lista<-return (randomList 2000000 100 seed)
          listas<-return (sort lista)
          start<-getCurrentTime
          evaluate (genFOB listas)
          end<-getCurrentTime
          print (diffUTCTime end start)          
          
-- Testing function <genFIO>
-- a=>Int
testFIO::IO()
testFIO=do
          start<-getCurrentTime
          seed<-newStdGen
          lista<-return (randomList 2000000 100 seed)
          listas<-return (sort lista)
          start<-getCurrentTime
          evaluate (genFIO listas)
          end<-getCurrentTime
          print (diffUTCTime end start)

-- Testing function <genFOB>
-- a=>String
tesFOBStr::IO()
tesFOBStr=do
             listaStr<-return ["Bocu","Valentin","Vasile","Dorin","Patilinet","Voipan","Alexe","Danciu","Matei","Demostene","Ionescu"]
             seed<-newStdGen
             lista<-genDTOB 2000000 seed 11 listaStr
             listas<-return (sort lista)
             start<-getCurrentTime
             evaluate (genFOB listas)
             end<-getCurrentTime
             print (diffUTCTime end start)

-- Main app....
main::IO()
main=do
       putStrLn "________________________">>testFOB>>putStrLn "________________________">>putStrLn ""
       putStrLn "________________________">>testFIO>>putStrLn "________________________">>putStrLn ""
       putStrLn "________________________">>tesFOBStr>>putStrLn "________________________">>putStrLn ""